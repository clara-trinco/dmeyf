n_md = 30 - 4
n_ms = 200 - 2
n_seeds = 5
avg_time_per_tree = 10 # in sec
library(lubridate)
seconds_to_period(n_md * n_ms * n_seeds * avg_time_per_tree )
library(lhs)
set.seed(17)
A <- matrix(runif(20), 10, 2)
B <- optimumLHS(10, 2)
par(mfrow=c(1,2))
plot(A)
plot(B)
carpeta_datasetsOri <-   "/Users/clara/Documents/00-Posgrado/4_DM_Eco_y_Finanzas/datasetsOri/"  #Establezco el Working Directory"
septiembre <- "paquete_premium_202009.csv"
ds <- fread(paste0(carpeta_datasetsOri, septiembre,collapse = ""), header=TRUE, showProgress = FALSE)
library( "data.table")
ds <- fread(paste0(carpeta_datasetsOri, septiembre,collapse = ""), header=TRUE, showProgress = FALSE)
ds[, clase_binaria := ifelse(clase_ternaria == "BAJA+2", "evento", "noevento")]
ds[, c("clase_ternaria") := NULL]
semillas <- as.vector(unlist(fread("cache/02_DT_semillas.txt")))[1:5]
semillas_2 <- c(999979,899971,799949,699863,599803)
library(rpart)
modelo_rpart <- function (train, test, cp =  0, ms = 20, mb = 1, md = 30) {
modelo <- rpart(clase_binaria ~ ., data = train,
xval=0,
cp=cp,
minsplit=ms,
minbucket=mb,
maxdepth = md )
test_prediccion <- predict(modelo, test , type = "prob")
roc_pred <-  ROCR::prediction(test_prediccion[,"evento"], test$clase_binaria,
label.ordering=c("noevento", "evento"))
auc_t <-  ROCR::performance( roc_pred,"auc")
unlist(auc_t@y.values)
}
tomar_muestra <- function(datos, resto=10000 ) {
t <- datos$clase_binaria == "evento"
r <- rep(FALSE, length(datos$clase_binaria))
r[!t][sample.int(resto,n=(length(t)-sum(t)))] <- TRUE
t | r
}
ds_sample <- tomar_muestra(ds)
table(ds[ds_sample]$clase_binaria)
set.seed( semillas[1] )
inTraining <- caret::createDataPartition(ds$clase_binaria, p = 0.70, list = FALSE)
train  <-  ds[  inTraining, ]
test   <-  ds[ -inTraining, ]
train_sample <- tomar_muestra(train)
t0 <- Sys.time()
r1 <- modelo_rpart(train, test)
t1 <- Sys.time()
print(t1-t0)
t0 <- Sys.time()
r2 <- modelo_rpart(train[train_sample,], test)
t1 <- Sys.time()
print(t1-t0)
print(r1)
print(r2)
experimento_rpart <- function (ds, semillas_2, cp =  0, ms = 20, mb = 1, md = 30) {
auc <- c()
for (s in semillas_2) {
set.seed(s)
inTraining <- caret::createDataPartition(ds$clase_binaria, p = 0.70, list = FALSE)
train  <-  ds[  inTraining, ]
test   <-  ds[ -inTraining, ]
train_sample <- tomar_muestra(train)
r <- modelo_rpart(train[train_sample,], test,  cp = cp, ms = ms, mb = mb, md = md)
auc <- c(auc, r)
}
data.table(mean_auc = mean(auc), sd_auc = sd(auc))
}
experimento_rpart(ds, semillas)
set.seed(semillas_2[1])
S <- optimumLHS(25,2)
# la primera columna es para el maxdepth, y la segunda para el minslip
S[,1] <- floor(26*S[,1]) + 4
S[,2] <- floor(198*S[,2]) + 2
resultados_random_search <- data.table()
for (e in 1:25) {
r <- experimento_rpart(ds, semillas_2, ms = S[e,2], md = S[e,1])
resultados_random_search <- rbindlist( list(resultados_random_search,
data.table(md = S[e,1], ms= S[e,2],r)
))
}
fwrite(resultados_random_search,"cache/03_HO_random_search.csv")
resultados_random_search <- fread("cache/03_HO_random_search.csv")
resultados_random_search
ggplot(resultados_random_search[mean_auc > 0.80,], aes(x=md,y=ms,color=sd_auc)) +
scale_color_gradient(  low = "blue", high = "red") +
geom_point(aes(size = mean_auc))
library(ggplot2)
ggplot(resultados_random_search[mean_auc > 0.80,], aes(x=md,y=ms,color=sd_auc)) +
scale_color_gradient(  low = "blue", high = "red") +
geom_point(aes(size = mean_auc))
library(DiceKriging)
library(mlrMBO)
set.seed(17)
obj.fun = makeSingleObjectiveFunction(
name = "Sine",
fn = function(x) sin(x),
par.set = makeNumericParamSet(lower = 3, upper = 13, len = 1)
)
ctrl = makeMBOControl()
ctrl = setMBOControlTermination(ctrl, iters = 10L)
ctrl = setMBOControlInfill(ctrl, crit = makeMBOInfillCritEI(),
opt = "focussearch")
lrn = makeMBOLearner(ctrl, obj.fun)
design = generateDesign(6L, getParamSet(obj.fun), fun = lhs::maximinLHS)
run = exampleRun(obj.fun, design = design, learner = lrn,
control = ctrl, points.per.dim = 100, show.info = TRUE)
install.packages("rgenoud")
library(rgenoud)
library(rgenoud)
run = exampleRun(obj.fun, design = design, learner = lrn,
control = ctrl, points.per.dim = 100, show.info = TRUE)
plotExampleRun(run, densregion = TRUE, gg.objects = list(theme_bw()), pause = FALSE)
set.seed(1)
configureMlr(show.learner.output = FALSE)
obj.fun = makeBraninFunction()
ctrl = makeMBOControl(propose.points = 1L)
ctrl = setMBOControlTermination(ctrl, iters = 10L)
ctrl = setMBOControlInfill(ctrl, crit = makeMBOInfillCritEI(),
opt = "focussearch", opt.focussearch.points = 20L)
lrn = makeMBOLearner(ctrl, obj.fun)
design = generateDesign(10L, getParamSet(obj.fun), fun = lhs::maximinLHS)
run = exampleRun(obj.fun, design = design, learner = lrn, control = ctrl,
points.per.dim = 50L, show.info = TRUE)
print(run)
plotExampleRun(run, gg.objects = list(theme_bw()), pause = FALSE)
resultados_maxdepth <- data.table()
for (v in 4:30) {
r <- data.table(
md = v,
experimento_rpart(ds, semillas, md= v, ms=40)
)
resultados_maxdepth <- rbindlist(list(resultados_maxdepth, r))
}
fwrite(resultados_maxdepth,"cache/03_HO_md.csv")
resultados_maxdepth <- fread("cache/03_HO_md.csv")
ggplot(resultados_maxdepth, aes(md,mean_auc))  +
geom_point()
max(resultados_maxdepth$mean_auc)
resultados_maxdepth[mean_auc == max(mean_auc), md]
obj.fun = makeSingleObjectiveFunction(
name = "max depth",
fn = function(x) - experimento_rpart(ds, semillas_2, md= as.integer(x))$mean_auc,
par.set = makeNumericParamSet("maxdepth", lower=4L , upper=  30L),
has.simple.signature = FALSE
)
ctrl = makeMBOControl()
ctrl = setMBOControlTermination(ctrl, iters = 10L)
ctrl = setMBOControlInfill(
ctrl,
crit = makeMBOInfillCritEI(),
opt = "focussearch"
)
lrn = makeMBOLearner(ctrl, obj.fun)
design = generateDesign(4L, getParamSet(obj.fun), fun = lhs::maximinLHS)
surr.km <- makeLearner("regr.km", predict.type = "se", covtype = "matern3_2")
run = exampleRun(
obj.fun,
design = design,
learner = surr.km,
control = ctrl,
points.per.dim = 25,
show.info = TRUE
)
saveRDS(run, "cache/03_HO_md_OB.RDS")
run <- readRDS("cache/03_HO_md_OB.RDS")
plotExampleRun(run, densregion = TRUE, gg.objects = list(theme_bw()), pause=FALSE)
print(run)
obj_fun <- function(x) {
experimento_rpart(ds, semillas_2, md= x$maxdepth, ms= x$minsplit)$mean_auc
}
obj.fun = makeSingleObjectiveFunction(
name = "2 parametros",
minimize = FALSE,
fn = obj_fun,
par.set = makeParamSet(
makeIntegerParam("maxdepth",  lower = 1L, upper = 25L),
makeIntegerParam("minsplit",  lower=2L , upper=  200L)
),
has.simple.signature = FALSE
)
ctrl = makeMBOControl()
ctrl = setMBOControlTermination(ctrl, iters = 17L)
ctrl = setMBOControlInfill(
ctrl,
crit = makeMBOInfillCritEI(),
opt = "focussearch"
)
#lrn = makeMBOLearner(ctrl, obj.fun)
design <- generateDesign(8L, getParamSet(obj.fun), fun = lhs::maximinLHS)
surr.km <-
makeLearner("regr.km", predict.type = "se", covtype = "matern3_2")
run  <-  mbo(obj.fun, design = design, learner = surr.km, control = ctrl)
saveRDS(run, "cache/03_HO_md_ms_OB.RDS")
run <- readRDS("cache/03_HO_md_ms_OB.RDS")
print(run)
iter <- as.data.frame(run$opt.path)
iter
ggplot(iter, aes(y=minsplit,x=maxdepth, color=prop.type)) + geom_point(aes(size = y))
